[
  {
    "name": "charAt2",
    "theory": [
      "Ph∆∞∆°ng th·ª©c `charAt()` tr·∫£ v·ªÅ k√Ω t·ª± t·∫°i m·ªôt v·ªã tr√≠ ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh trong chu·ªói.",
      "C√∫ ph√°p: str.charAt(index)\n- index: ch·ªâ s·ªë c·ªßa k√Ω t·ª± c·∫ßn l·∫•y."
    ],
    "code": "String.prototype.charAt2 = function(index) {\n  index = Math.floor(index);\n  if (index < 0 || index >= this.length) return '';\n  return this[index];\n}",
    "examples": "console.log('hello'.charAt2(1)); // 'e'\nconsole.log('hello'.charAt2(5)); // ''"
  },
  {
    "name": "charCodeAt2",
    "theory": [
      "Ph∆∞∆°ng th·ª©c `charCodeAt()` tr·∫£ v·ªÅ m√£ Unicode c·ªßa k√Ω t·ª± t·∫°i v·ªã tr√≠ ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh.",
      "C√∫ ph√°p: str.charCodeAt(index)\n- index: ch·ªâ s·ªë c·ªßa k√Ω t·ª± c·∫ßn l·∫•y m√£."
    ],
    "code": "String.prototype.charCodeAt2 = function(index) {\n  index = Math.floor(index);\n  if (index < 0 || index >= this.length) return NaN;\n  return this[index].charCodeAt(0);\n}",
    "examples": "console.log('ABC'.charCodeAt2(1)); // 66\nconsole.log('ABC'.charCodeAt2(3)); // NaN"
  },
  {
    "name": "codePointAt2",
    "theory": [
      "Ph∆∞∆°ng th·ª©c `codePointAt()` tr·∫£ v·ªÅ m√£ code point c·ªßa k√Ω t·ª± t·∫°i v·ªã tr√≠ ch·ªâ ƒë·ªãnh, h·ªó tr·ª£ k√Ω t·ª± UTF-16 m·ªü r·ªông.",
      "C√∫ ph√°p: str.codePointAt(pos)\n- pos: v·ªã tr√≠ c·ªßa k√Ω t·ª± c·∫ßn l·∫•y m√£ code point."
    ],
    "code": "String.prototype.codePointAt2 = function(pos) {\n  var code = this.charCodeAt(pos);\n  if (code >= 0xd800 && code <= 0xdbff && this.length > pos + 1) {\n    var next = this.charCodeAt(pos + 1);\n    if (next >= 0xdc00 && next <= 0xdfff) {\n      return ((code - 0xd800) * 0x400) + (next - 0xdc00) + 0x10000;\n    }\n  }\n  return code;\n}",
    "examples": "console.log('êê∑'.codePointAt2(0)); // 66615\nconsole.log('ABC'.codePointAt2(0)); // 65"
  },
  {
    "name": "concat2",
    "theory": [
      "Ph∆∞∆°ng th·ª©c `concat()` n·ªëi m·ªôt ho·∫∑c nhi·ªÅu chu·ªói v·ªõi chu·ªói hi·ªán t·∫°i v√† tr·∫£ v·ªÅ chu·ªói m·ªõi.",
      "C√∫ ph√°p: str.concat(str2, str3, ..., strN)"
    ],
    "code": "String.prototype.concat2 = function(...args) {\n  return this + args.join('');\n}",
    "examples": "console.log('Hello'.concat2(' ', 'World')); // 'Hello World'\nconsole.log('A'.concat2('B', 'C')); // 'ABC'"
  },
  {
    "name": "includes2",
    "theory": [
      "Ph∆∞∆°ng th·ª©c `includes()` ki·ªÉm tra xem chu·ªói c√≥ ch·ª©a chu·ªói con ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh hay kh√¥ng.",
      "C√∫ ph√°p: str.includes(searchString, position)\n- searchString: chu·ªói con c·∫ßn t√¨m\n- position (t√πy ch·ªçn): v·ªã tr√≠ b·∫Øt ƒë·∫ßu t√¨m ki·∫øm"
    ],
    "code": "String.prototype.includes2 = function(searchString, position = 0) {\n  return this.indexOf(searchString, position) !== -1;\n}",
    "examples": "console.log('hello world'.includes2('world')); // true\nconsole.log('hello world'.includes2('World')); // false"
  },
  {
    "name": "endsWith2",
    "theory": [
      "`endsWith()` ki·ªÉm tra xem chu·ªói c√≥ k·∫øt th√∫c b·∫±ng chu·ªói con ch·ªâ ƒë·ªãnh hay kh√¥ng.",
      "C√∫ ph√°p: str.endsWith(searchString[, length])\n- searchString: chu·ªói c·∫ßn ki·ªÉm tra.\n- length (t√πy ch·ªçn): ƒë·ªô d√†i chu·ªói c·∫ßn xem x√©t."
    ],
    "code": "String.prototype.endsWith2 = function(searchString, length) {\n  const str = this.toString();\n  const len = length !== undefined ? Math.min(length, str.length) : str.length;\n  return str.substring(len - searchString.length, len) === searchString;\n};",
    "examples": "console.log('JavaScript'.endsWith2('Script')); // true\nconsole.log('JavaScript'.endsWith2('Java')); // false\nconsole.log('JavaScript'.endsWith2('Java', 4)); // true"
  },
  {
    "name": "includes2",
    "theory": [
      "`includes()` ki·ªÉm tra xem chu·ªói c√≥ ch·ª©a chu·ªói con ch·ªâ ƒë·ªãnh hay kh√¥ng.",
      "C√∫ ph√°p: str.includes(searchString[, position])\n- searchString: chu·ªói c·∫ßn t√¨m.\n- position (t√πy ch·ªçn): v·ªã tr√≠ b·∫Øt ƒë·∫ßu t√¨m ki·∫øm."
    ],
    "code": "String.prototype.includes2 = function(searchString, position) {\n  const str = this.toString();\n  return str.indexOf(searchString, position || 0) !== -1;\n};",
    "examples": "console.log('Hello World'.includes2('World')); // true\nconsole.log('Hello World'.includes2('world')); // false\nconsole.log('Hello World'.includes2('o', 5)); // true"
  },
  {
    "name": "indexOf2",
    "theory": [
      "`indexOf()` tr·∫£ v·ªÅ v·ªã tr√≠ ƒë·∫ßu ti√™n t√¨m th·∫•y c·ªßa chu·ªói con trong chu·ªói cha, ho·∫∑c -1 n·∫øu kh√¥ng t√¨m th·∫•y.",
      "C√∫ ph√°p: str.indexOf(searchValue[, fromIndex])\n- searchValue: chu·ªói c·∫ßn t√¨m.\n- fromIndex (t√πy ch·ªçn): v·ªã tr√≠ b·∫Øt ƒë·∫ßu t√¨m ki·∫øm."
    ],
    "code": "String.prototype.indexOf2 = function(searchValue, fromIndex) {\n  const str = this.toString();\n  return str.indexOf(searchValue, fromIndex || 0);\n};",
    "examples": "console.log('hello world'.indexOf2('o')); // 4\nconsole.log('hello world'.indexOf2('o', 5)); // 7\nconsole.log('hello world'.indexOf2('z')); // -1"
  },
  {
    "name": "lastIndexOf2",
    "theory": [
      "`lastIndexOf()` tr·∫£ v·ªÅ v·ªã tr√≠ cu·ªëi c√πng t√¨m th·∫•y c·ªßa chu·ªói con trong chu·ªói cha, ho·∫∑c -1 n·∫øu kh√¥ng t√¨m th·∫•y.",
      "C√∫ ph√°p: str.lastIndexOf(searchValue[, fromIndex])\n- searchValue: chu·ªói c·∫ßn t√¨m.\n- fromIndex (t√πy ch·ªçn): v·ªã tr√≠ b·∫Øt ƒë·∫ßu t√¨m t·ª´ ph·∫£i sang tr√°i."
    ],
    "code": "String.prototype.lastIndexOf2 = function(searchValue, fromIndex) {\n  const str = this.toString();\n  if (fromIndex === undefined || fromIndex > str.length - 1) {\n    fromIndex = str.length - 1;\n  }\n  return str.lastIndexOf(searchValue, fromIndex);\n};",
    "examples": "console.log('can can can'.lastIndexOf2('can')); // 8\nconsole.log('can can can'.lastIndexOf2('can', 4)); // 4\nconsole.log('can can can'.lastIndexOf2('dog')); // -1"
  },
  {
    "name": "localeCompare2",
    "theory": [
      "`localeCompare()` so s√°nh hai chu·ªói theo th·ª© t·ª± s·∫Øp x·∫øp c·ª• th·ªÉ c·ªßa ng√¥n ng·ªØ.",
      "C√∫ ph√°p: str.localeCompare(compareString[, locales[, options]])"
    ],
    "code": "String.prototype.localeCompare2 = function(compareString, locales, options) {\n  return this.toString().localeCompare(compareString, locales, options);\n};",
    "examples": "console.log('a'.localeCompare2('b')); // -1\nconsole.log('b'.localeCompare2('a')); // 1\nconsole.log('a'.localeCompare2('a')); // 0"
  },
  {
    "name": "match2",
    "theory": [
      "Ph∆∞∆°ng th·ª©c `match()` t√¨m kh·ªõp chu·ªói v·ªõi m·ªôt bi·ªÉu th·ª©c ch√≠nh quy.",
      "C√∫ ph√°p: str.match(regexp)"
    ],
    "code": "String.prototype.match2 = function(regexp) {\n  return this.toString().match(regexp);\n}",
    "examples": "console.log('abc123'.match2(/\\d+/)); // ['123']\nconsole.log('abc'.match2(/x/)); // null"
  },
  {
    "name": "matchAll2",
    "theory": [
      "Ph∆∞∆°ng th·ª©c `matchAll()` tr·∫£ v·ªÅ m·ªôt iterator cho t·∫•t c·∫£ c√°c k·∫øt qu·∫£ kh·ªõp v·ªõi m·ªôt bi·ªÉu th·ª©c ch√≠nh quy c√≥ c·ªù 'g'.",
      "C√∫ ph√°p: str.matchAll(regexp)"
    ],
    "code": "String.prototype.matchAll2 = function(regexp) {\n  return Array.from(this.toString().matchAll(regexp));\n}",
    "examples": "console.log([... 'test1test2'.matchAll2(/test\\d/g)]); // [['test1'], ['test2']]"
  },
  {
    "name": "normalize2",
    "theory": [
      "Ph∆∞∆°ng th·ª©c `normalize()` chu·∫©n h√≥a chu·ªói Unicode th√†nh m·ªôt d·∫°ng nh·∫•t ƒë·ªãnh.",
      "C√∫ ph√°p: str.normalize([form])"
    ],
    "code": "String.prototype.normalize2 = function(form) {\n  return this.toString().normalize(form);\n}",
    "examples": "console.log('\\u1E9B\\u0323'.normalize2('NFC')); // '·π©'\nconsole.log('\\u1E9B\\u0323'.normalize2('NFD')); // '·∫õÃ£'"
  },
  {
    "name": "padEnd2",
    "theory": [
      "Ph∆∞∆°ng th·ª©c `padEnd()` th√™m k√Ω t·ª± v√†o cu·ªëi chu·ªói cho ƒë·∫øn khi ƒë·∫°t ƒë∆∞·ª£c ƒë·ªô d√†i mong mu·ªën.",
      "C√∫ ph√°p: str.padEnd(targetLength[, padString])"
    ],
    "code": "String.prototype.padEnd2 = function(targetLength, padString) {\n  return this.toString().padEnd(targetLength, padString);\n}",
    "examples": "console.log('abc'.padEnd2(10, '-')); // 'abc-------'\nconsole.log('12345'.padEnd2(8, '0')); // '12345000'"
  },
  {
    "name": "padStart2",
    "theory": [
      "Ph∆∞∆°ng th·ª©c `padStart()` th√™m k√Ω t·ª± v√†o ƒë·∫ßu chu·ªói cho ƒë·∫øn khi ƒë·∫°t ƒë∆∞·ª£c ƒë·ªô d√†i mong mu·ªën.",
      "C√∫ ph√°p: str.padStart(targetLength[, padString])"
    ],
    "code": "String.prototype.padStart2 = function(targetLength, padString) {\n  return this.toString().padStart(targetLength, padString);\n}",
    "examples": "console.log('abc'.padStart2(10, '-')); // '-------abc'\nconsole.log('5'.padStart2(3, '0')); // '005'"
  },
  {
    "name": "repeat2",
    "theory": [
      "Ph∆∞∆°ng th·ª©c `repeat()` t·∫°o m·ªôt chu·ªói m·ªõi b·∫±ng c√°ch l·∫∑p l·∫°i chu·ªói g·ªëc m·ªôt s·ªë l·∫ßn x√°c ƒë·ªãnh.",
      "C√∫ ph√°p: str.repeat(count)"
    ],
    "code": "String.prototype.repeat2 = function(count) {\n  return this.toString().repeat(count);\n}",
    "examples": "console.log('abc'.repeat2(3)); // 'abcabcabc'\nconsole.log('x'.repeat2(0)); // ''"
  },
  {
    "name": "replace2",
    "theory": [
      "Ph∆∞∆°ng th·ª©c `replace()` tr·∫£ v·ªÅ m·ªôt chu·ªói m·ªõi v·ªõi m·ªôt s·ªë ho·∫∑c t·∫•t c·∫£ c√°c k·∫øt qu·∫£ kh·ªõp ƒë∆∞·ª£c thay th·∫ø b·∫±ng m·ªôt gi√° tr·ªã m·ªõi.",
      "C√∫ ph√°p: str.replace(pattern, replacement)"
    ],
    "code": "String.prototype.replace2 = function(pattern, replacement) {\n  return this.toString().replace(pattern, replacement);\n}",
    "examples": "console.log('hello world'.replace2('world', 'there')); // 'hello there'\nconsole.log('abcabc'.replace2(/a/, 'x')); // 'xbcabc'"
  },
  {
    "name": "replaceAll2",
    "theory": [
      "Ph∆∞∆°ng th·ª©c `replaceAll()` thay th·∫ø t·∫•t c·∫£ c√°c l·∫ßn xu·∫•t hi·ªán c·ªßa m·ªôt chu·ªói ho·∫∑c bi·ªÉu th·ª©c ch√≠nh quy.",
      "C√∫ ph√°p: str.replaceAll(pattern, replacement)"
    ],
    "code": "String.prototype.replaceAll2 = function(pattern, replacement) {\n  return this.toString().replaceAll(pattern, replacement);\n}",
    "examples": "console.log('abcabc'.replaceAll2('a', 'x')); // 'xbcxbc'\nconsole.log('123-123'.replaceAll2('-', ':')); // '123:123'"
  },
  {
    "name": "search2",
    "theory": [
      "Ph∆∞∆°ng th·ª©c `search()` th·ª±c hi·ªán t√¨m ki·∫øm kh·ªõp bi·ªÉu th·ª©c ch√≠nh quy v√† tr·∫£ v·ªÅ ch·ªâ s·ªë ƒë·∫ßu ti√™n t√¨m th·∫•y.",
      "C√∫ ph√°p: str.search(regexp)"
    ],
    "code": "String.prototype.search2 = function(regexp) {\n  return this.toString().search(regexp);\n}",
    "examples": "console.log('hello world'.search2(/world/)); // 6\nconsole.log('abc'.search2(/x/)); // -1"
  },
  {
    "name": "slice2",
    "theory": [
      "Ph∆∞∆°ng th·ª©c `slice()` tr√≠ch xu·∫•t m·ªôt ph·∫ßn c·ªßa chu·ªói v√† tr·∫£ v·ªÅ chu·ªói m·ªõi m√† kh√¥ng l√†m thay ƒë·ªïi chu·ªói g·ªëc.",
      "C√∫ ph√°p: str.slice(beginIndex[, endIndex])"
    ],
    "code": "String.prototype.slice2 = function(beginIndex, endIndex) {\n  return this.toString().slice(beginIndex, endIndex);\n}",
    "examples": "console.log('abcdef'.slice2(1, 4)); // 'bcd'\nconsole.log('abcdef'.slice2(-3)); // 'def'"
  },
  {
    "name": "split2",
    "theory": [
      "Ph∆∞∆°ng th·ª©c `split()` chia chu·ªói th√†nh m·ªôt m·∫£ng c√°c chu·ªói con d·ª±a tr√™n m·ªôt k√Ω t·ª± ho·∫∑c bi·ªÉu th·ª©c ch√≠nh quy.",
      "C√∫ ph√°p: str.split(separator[, limit])"
    ],
    "code": "String.prototype.split2 = function(separator, limit) {\n  return this.toString().split(separator, limit);\n}",
    "examples": "console.log('a,b,c'.split2(',')); // ['a', 'b', 'c']\nconsole.log('abc'.split2('', 2)); // ['a', 'b']"
  },
  {
    "name": "startsWith2",
    "theory": [
      "Ph∆∞∆°ng th·ª©c `startsWith()` ki·ªÉm tra xem chu·ªói c√≥ b·∫Øt ƒë·∫ßu b·∫±ng k√Ω t·ª±/chu·ªói con ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh hay kh√¥ng.",
      "C√∫ ph√°p: str.startsWith(searchString[, position])"
    ],
    "code": "String.prototype.startsWith2 = function(searchString, position) {\n  return this.toString().startsWith(searchString, position);\n}",
    "examples": "console.log('hello world'.startsWith2('hello')); // true\nconsole.log('hello'.startsWith2('e', 1)); // true"
  },
  {
    "name": "substring2",
    "theory": [
      "Ph∆∞∆°ng th·ª©c `substring()` tr·∫£ v·ªÅ m·ªôt chu·ªói con t·ª´ chu·ªói g·ªëc gi·ªØa hai ch·ªâ s·ªë ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh.",
      "C√∫ ph√°p: str.substring(indexStart[, indexEnd])"
    ],
    "code": "String.prototype.substring2 = function(indexStart, indexEnd) {\n  return this.toString().substring(indexStart, indexEnd);\n}",
    "examples": "console.log('hello'.substring2(1, 4)); // 'ell'\nconsole.log('hello'.substring2(4, 1)); // 'ell'"
  },
  {
    "name": "toLocaleLowerCase2",
    "theory": [
      "Ph∆∞∆°ng th·ª©c `toLocaleLowerCase()` chuy·ªÉn ƒë·ªïi chu·ªói th√†nh ch·ªØ th∆∞·ªùng, s·ª≠ d·ª•ng c√°c quy t·∫Øc b·∫£n ƒë·ªãa h√≥a.",
      "C√∫ ph√°p: str.toLocaleLowerCase([locale])"
    ],
    "code": "String.prototype.toLocaleLowerCase2 = function(locale) {\n  return this.toString().toLocaleLowerCase(locale);\n}",
    "examples": "console.log('ƒ∞stanbul'.toLocaleLowerCase2('tr-TR')); // 'istanbul' trong ti·∫øng Th·ªï Nhƒ© K·ª≥"
  },
  {
    "name": "toLocaleUpperCase2",
    "theory": [
      "Ph∆∞∆°ng th·ª©c `toLocaleUpperCase()` chuy·ªÉn ƒë·ªïi chu·ªói th√†nh ch·ªØ in hoa, s·ª≠ d·ª•ng c√°c quy t·∫Øc b·∫£n ƒë·ªãa h√≥a.",
      "C√∫ ph√°p: str.toLocaleUpperCase([locale])"
    ],
    "code": "String.prototype.toLocaleUpperCase2 = function(locale) {\n  return this.toString().toLocaleUpperCase(locale);\n}",
    "examples": "console.log('istanbul'.toLocaleUpperCase2('tr-TR')); // 'ƒ∞STANBUL'"
  },
  {
    "name": "toLowerCase2",
    "theory": [
      "Ph∆∞∆°ng th·ª©c `toLowerCase()` chuy·ªÉn ƒë·ªïi t·∫•t c·∫£ c√°c k√Ω t·ª± trong chu·ªói th√†nh ch·ªØ th∆∞·ªùng.",
      "C√∫ ph√°p: str.toLowerCase()"
    ],
    "code": "String.prototype.toLowerCase2 = function() {\n  return this.toString().toLowerCase();\n}",
    "examples": "console.log('Hello World'.toLowerCase2()); // 'hello world'\nconsole.log('JavaScript'.toLowerCase2()); // 'javascript'"
  },
  {
    "name": "toString2",
    "theory": [
      "`toString()` tr·∫£ v·ªÅ chu·ªói ƒë·∫°i di·ªán c·ªßa ƒë·ªëi t∆∞·ª£ng String.",
      "C√∫ ph√°p: str.toString()"
    ],
    "code": "String.prototype.toString2 = function() {\n  return this.toString();\n}",
    "examples": "console.log((123).toString2()); // '123'\nconsole.log([1, 2, 3].toString2()); // '1,2,3'"
  },
  {
    "name": "toUpperCase2",
    "theory": [
      "`toUpperCase()` chuy·ªÉn ƒë·ªïi t·∫•t c·∫£ c√°c k√Ω t·ª± trong chu·ªói th√†nh ch·ªØ in hoa.",
      "C√∫ ph√°p: str.toUpperCase()"
    ],
    "code": "String.prototype.toUpperCase2 = function() {\n  return this.toString().toUpperCase();\n}",
    "examples": "console.log('hello world'.toUpperCase2()); // 'HELLO WORLD'\nconsole.log('javascript'.toUpperCase2()); // 'JAVASCRIPT'"
  },
  {
    "name": "trim2",
    "theory": [
      "`trim()` lo·∫°i b·ªè kho·∫£ng tr·∫Øng ·ªü ƒë·∫ßu v√† cu·ªëi chu·ªói.",
      "C√∫ ph√°p: str.trim()"
    ],
    "code": "String.prototype.trim2 = function() {\n  return this.toString().trim();\n}",
    "examples": "console.log('   hello   '.trim2()); // 'hello'\nconsole.log('   '.trim2()); // ''"
  },
  {
    "name": "trimEnd2",
    "theory": [
      "`trimEnd()` lo·∫°i b·ªè kho·∫£ng tr·∫Øng ·ªü cu·ªëi chu·ªói.",
      "C√∫ ph√°p: str.trimEnd()"
    ],
    "code": "String.prototype.trimEnd2 = function() {\n  return this.toString().trimEnd();\n}",
    "examples": "console.log('hello   '.trimEnd2()); // 'hello'\nconsole.log('   '.trimEnd2()); // ''"
  },
  {
    "name": "trimStart2",
    "theory": [
      "`trimStart()` lo·∫°i b·ªè kho·∫£ng tr·∫Øng ·ªü ƒë·∫ßu chu·ªói.",
      "C√∫ ph√°p: str.trimStart()"
    ],
    "code": "String.prototype.trimStart2 = function() {\n  return this.toString().trimStart();\n}",
    "examples": "console.log('   hello'.trimStart2()); // 'hello'\nconsole.log('   '.trimStart2()); // ''"
  },
  {
    "name": "valueOf2",
    "theory": [
      "`valueOf()` tr·∫£ v·ªÅ gi√° tr·ªã nguy√™n th·ªßy c·ªßa ƒë·ªëi t∆∞·ª£ng String.",
      "C√∫ ph√°p: str.valueOf()"
    ],
    "code": "String.prototype.valueOf2 = function() {\n  return this.toString();\n}",
    "examples": "console.log((new String('hello')).valueOf2()); // 'hello'\nconsole.log((new String('123')).valueOf2()); // '123'"
  }

]
