[
  {
    "name": "at2",
    "theory": [
      "Phương thức `at()` trả về phần tử ở vị trí chỉ mục được xác định trong mảng. Nếu chỉ mục là số âm, nó tính từ cuối mảng.",
      "Cú pháp: array.at(index)\n- index: chỉ mục của phần tử cần truy cập (có thể là số âm để truy cập từ cuối mảng)."
    ],
    "code": "Array.prototype.at2 = function(num) {\n    num = Math.trunc(num) || 0;\n    if(num < 0) {\n        num = this.length + num;\n    }\n    if(num >= this.length) {\n        return undefined;\n    }\n    return this[num];\n}",
    "examples": "console.log([1, 2, 3, 4, 5].at2(0)); // 1\nconsole.log([1, 2, 3, 4, 5].at2(-2)); // 4\nconsole.log([1, 2, 3, 4, 5].at2(5)); // undefined"
  },
  {
    "name": "concat2",
    "theory": [
      "Phương thức `concat()` dùng để nối một hoặc nhiều mảng và/hoặc giá trị vào mảng gốc.",
      "Cú pháp: array.concat(...values)\n- values: các mảng hoặc giá trị cần nối vào mảng gốc."
    ],
    "code": "Array.prototype.concat2 = function(...args) {\n    let result = [...this];\n    for (let arg of args) {\n        if (Array.isArray(arg)) {\n            result.push(...arg);\n        } else {\n            result.push(arg);\n        }\n    }\n    return result;\n}",
    "examples": "console.log([1, 2, 3].concat2([4, 5], [6, 7])); // [1, 2, 3, 4, 5, 6, 7]\nconsole.log([1, 2, 3].concat2(4, 5)); // [1, 2, 3, 4, 5]\nconsole.log([1, 2, 3].concat2()); // [1, 2, 3]"
  },
  {
    "name": "copyWithin2",
    "theory": [
      "Phương thức `copyWithin()` sao chép một phần của mảng vào chính nó tại vị trí khác mà không thay đổi chiều dài mảng.",
      "Cú pháp: array.copyWithin(target, start, end)\n- target: chỉ mục đích sẽ sao chép đến.\n- start: chỉ mục bắt đầu sao chép (mặc định là 0).\n- end: chỉ mục kết thúc sao chép (mặc định là mảng.length)."
    ],
    "code": "Array.prototype.copyWithin2 = function(target, start, end) {\n    const arr = [...this];\n    const len = arr.length;\n    if (target < 0) target += len;\n    if (start < 0) start += len;\n    if (end < 0) end += len;\n    for (let i = start; i < end; i++) {\n        if (i >= len || target >= len) break;\n        arr[target++] = arr[i];\n    }\n    return arr;\n}",
    "examples": "console.log([1, 2, 3, 4, 5].copyWithin2(0, 3, 5)); // [4, 5, 3, 4, 5]\nconsole.log([1, 2, 3, 4, 5].copyWithin2(2, 0, 3)); // [1, 2, 1, 2, 3]\nconsole.log([1, 2, 3, 4, 5].copyWithin2(0, -2, -1)); // [4, 5, 3, 4, 5]"
  },
  {
    "name": "every2",
    "theory": [
      "Phương thức `every()` kiểm tra xem tất cả các phần tử trong mảng có thỏa mãn điều kiện do một hàm xác định hay không.",
      "Cú pháp: array.every(callback, thisArg)\n- callback: hàm callback được gọi cho mỗi phần tử.\n- thisArg: giá trị được sử dụng làm `this` khi gọi hàm callback."
    ],
    "code": "Array.prototype.every2 = function(callback, thisArg) {\n    for (let i = 0; i < this.length; i++) {\n        if (!callback.call(thisArg, this[i], i, this)) {\n            return false;\n        }\n    }\n    return true;\n}",
    "examples": "console.log([1, 2, 3].every2(num => num > 0)); // true\nconsole.log([1, 2, 3].every2(num => num < 3)); // false\nconsole.log([1, 2, 3].every2(num => num > 1)); // false"
  },
  {
    "name": "fill2",
    "theory": [
      "Phương thức `fill()` điền giá trị vào tất cả các phần tử trong mảng từ chỉ mục bắt đầu đến chỉ mục kết thúc.",
      "Cú pháp: array.fill(value, start, end)\n- value: giá trị cần điền vào mảng.\n- start: chỉ mục bắt đầu điền (mặc định là 0).\n- end: chỉ mục kết thúc (mặc định là mảng.length)."
    ],
    "code": "Array.prototype.fill2 = function(value, start = 0, end = this.length) {\n    const arr = [...this];\n    if (start < 0) start += arr.length;\n    if (end < 0) end += arr.length;\n    for (let i = start; i < end; i++) {\n        arr[i] = value;\n    }\n    return arr;\n}",
    "examples": "console.log([1, 2, 3, 4, 5].fill2(0)); // [0, 0, 0, 0, 0]\nconsole.log([1, 2, 3, 4, 5].fill2(0, 1, 3)); // [1, 0, 0, 4, 5]\nconsole.log([1, 2, 3, 4, 5].fill2(0, -3, -1)); // [1, 2, 0, 0, 5]"
  },
  {
    "name": "filter2",
    "theory": [
      "Phương thức `filter()` tạo ra một mảng mới với tất cả các phần tử thỏa điều kiện do hàm callback cung cấp.",
      "Cú pháp: array.filter(callback(element, index, array), thisArg)"
    ],
    "code": "Array.prototype.filter2 = function(callback, thisArg) {\n  const result = [];\n  for (let i = 0; i < this.length; i++) {\n    if (i in this && callback.call(thisArg, this[i], i, this)) {\n      result.push(this[i]);\n    }\n  }\n  return result;\n}",
    "examples": "console.log([1, 2, 3, 4].filter2(n => n % 2 === 0)); // [2, 4]\nconsole.log(['a', 'b', 'c'].filter2(ch => ch !== 'b')); // ['a', 'c']"
  },
  {
    "name": "find2",
    "theory": [
      "Phương thức `find()` trả về phần tử đầu tiên trong mảng thỏa mãn điều kiện do hàm callback cung cấp.",
      "Cú pháp: array.find(callback(element, index, array), thisArg)"
    ],
    "code": "Array.prototype.find2 = function(callback, thisArg) {\n  for (let i = 0; i < this.length; i++) {\n    if (callback.call(thisArg, this[i], i, this)) {\n      return this[i];\n    }\n  }\n  return undefined;\n}",
    "examples": "console.log([5, 12, 8, 130, 44].find2(el => el > 10)); // 12\nconsole.log(['a', 'b', 'c'].find2(ch => ch === 'c')); // 'c'"
  },
  {
    "name": "findIndex2",
    "theory": [
      "Phương thức `findIndex()` trả về chỉ số của phần tử đầu tiên thỏa mãn điều kiện do hàm callback cung cấp, nếu không có thì trả về -1.",
      "Cú pháp: array.findIndex(callback(element, index, array), thisArg)"
    ],
    "code": "Array.prototype.findIndex2 = function(callback, thisArg) {\n  for (let i = 0; i < this.length; i++) {\n    if (callback.call(thisArg, this[i], i, this)) {\n      return i;\n    }\n  }\n  return -1;\n}",
    "examples": "console.log([5, 12, 8, 130, 44].findIndex2(el => el > 13)); // 3\nconsole.log([1, 2, 3].findIndex2(x => x === 2)); // 1"
  },
  {
    "name": "flat2",
    "theory": [
      "Phương thức `flat()` làm phẳng mảng lồng nhau đến độ sâu được chỉ định.",
      "Cú pháp: array.flat(depth = 1)\n- depth: độ sâu cần làm phẳng (mặc định là 1)."
    ],
    "code": "Array.prototype.flat2 = function(depth = 1) {\n  const flatten = (arr, d) => {\n    return d > 0 ? arr.reduce((acc, val) => acc.concat(Array.isArray(val) ? flatten(val, d - 1) : val), []) : arr.slice();\n  };\n  return flatten(this, depth);\n}",
    "examples": "console.log([1, [2, [3, [4]]]].flat2()); // [1, 2, [3, [4]]]\nconsole.log([1, [2, [3, [4]]]].flat2(2)); // [1, 2, 3, [4]]"
  },
  {
    "name": "flatMap2",
    "theory": [
      "Phương thức `flatMap()` kết hợp `map()` và `flat()` ở độ sâu 1. Nó đầu tiên gọi hàm map cho từng phần tử, sau đó làm phẳng mảng kết quả.",
      "Cú pháp: array.flatMap(callback(currentValue, index, array), thisArg)"
    ],
    "code": "Array.prototype.flatMap2 = function(callback, thisArg) {\n  return this.map((el, i, arr) => callback.call(thisArg, el, i, arr)).flat();\n}",
    "examples": "console.log([1, 2, 3].flatMap2(x => [x, x * 2])); // [1, 2, 2, 4, 3, 6]\nconsole.log(['a', 'b'].flatMap2(x => [x, x.toUpperCase()])); // ['a', 'A', 'b', 'B']"
  },
  {
    "name": "forEach2",
    "theory": [
      "Phương thức `forEach()` thực thi một hàm được cung cấp một lần cho mỗi phần tử của mảng.",
      "Cú pháp: array.forEach(callback(currentValue, index, array), thisArg)"
    ],
    "code": "Array.prototype.forEach2 = function(callback, thisArg) {\n  for (let i = 0; i < this.length; i++) {\n    if (i in this) {\n      callback.call(thisArg, this[i], i, this);\n    }\n  }\n}",
    "examples": "[1, 2, 3].forEach2((n, i) => console.log(`Index ${i}: ${n}`));\n// Output:\n// Index 0: 1\n// Index 1: 2\n// Index 2: 3"
  },
  {
    "name": "from2",
    "theory": [
      "Phương thức tĩnh `Array.from()` tạo một mảng mới từ một đối tượng giống mảng hoặc có thể lặp (iterable).",
      "Cú pháp: Array.from(arrayLike, mapFn?, thisArg)"
    ],
    "code": "Array.from2 = function(arrayLike, mapFn, thisArg) {\n  const arr = [];\n  for (let i = 0; i < arrayLike.length; i++) {\n    arr.push(mapFn ? mapFn.call(thisArg, arrayLike[i], i) : arrayLike[i]);\n  }\n  return arr;\n}",
    "examples": "console.log(Array.from2('abc')); // ['a', 'b', 'c']\nconsole.log(Array.from2([1, 2, 3], x => x * 2)); // [2, 4, 6]"
  },
  {
    "name": "includes2",
    "theory": [
      "Phương thức `includes()` kiểm tra xem một mảng có chứa một giá trị cụ thể hay không.",
      "Cú pháp: array.includes(valueToFind, fromIndex = 0)"
    ],
    "code": "Array.prototype.includes2 = function(searchElement, fromIndex = 0) {\n  const len = this.length;\n  let i = fromIndex >= 0 ? fromIndex : Math.max(len + fromIndex, 0);\n  for (; i < len; i++) {\n    if (this[i] === searchElement || (Number.isNaN(this[i]) && Number.isNaN(searchElement))) {\n      return true;\n    }\n  }\n  return false;\n}",
    "examples": "console.log([1, 2, 3].includes2(2)); // true\nconsole.log(['a', 'b', 'c'].includes2('d')); // false\nconsole.log([NaN].includes2(NaN)); // true"
  },
  {
    "name": "indexOf2",
    "theory": [
      "Phương thức `indexOf()` trả về chỉ mục đầu tiên mà tại đó một phần tử được tìm thấy trong mảng, hoặc -1 nếu không tìm thấy.",
      "Cú pháp: array.indexOf(searchElement, fromIndex = 0)"
    ],
    "code": "Array.prototype.indexOf2 = function(searchElement, fromIndex = 0) {\n  const len = this.length;\n  let i = fromIndex >= 0 ? fromIndex : Math.max(len + fromIndex, 0);\n  for (; i < len; i++) {\n    if (this[i] === searchElement) return i;\n  }\n  return -1;\n}",
    "examples": "console.log([1, 2, 3, 2].indexOf2(2)); // 1\nconsole.log([1, 2, 3].indexOf2(4)); // -1\nconsole.log([1, 2, 3, 2].indexOf2(2, 2)); // 3"
  },
  {
    "name": "isArray2",
    "theory": [
      "Phương thức tĩnh `Array.isArray()` kiểm tra xem một giá trị có phải là một mảng hay không.",
      "Cú pháp: Array.isArray(value)"
    ],
    "code": "Array.isArray2 = function(value) {\n  return Object.prototype.toString.call(value) === '[object Array]';\n}",
    "examples": "console.log(Array.isArray2([1, 2, 3])); // true\nconsole.log(Array.isArray2('hello')); // false\nconsole.log(Array.isArray2({})); // false"
  },
  {
    "name": "join2",
    "theory": [
      "Phương thức `join()` nối tất cả các phần tử của một mảng thành một chuỗi, phân tách bằng dấu phân cách được chỉ định.",
      "Cú pháp: array.join(separator)"
    ],
    "code": "Array.prototype.join2 = function(separator = ',') {\n  let result = '';\n  for (let i = 0; i < this.length; i++) {\n    result += (i > 0 ? separator : '') + (this[i] !== undefined && this[i] !== null ? this[i] : '');\n  }\n  return result;\n}",
    "examples": "console.log(['a', 'b', 'c'].join2()); // 'a,b,c'\nconsole.log(['a', 'b', 'c'].join2('-')); // 'a-b-c'\nconsole.log([1, , 3].join2()); // '1,,3'"
  },
  {
    "name": "keys2",
    "theory": [
      "Phương thức `keys()` trả về một iterator chứa các chỉ mục (key) của mảng.",
      "Cú pháp: array.keys()"
    ],
    "code": "Array.prototype.keys2 = function() {\n  const result = [];\n  for (let i = 0; i < this.length; i++) {\n    result.push(i);\n  }\n  return result[Symbol.iterator]();\n}",
    "examples": "const it = [10, 20, 30].keys2();\nconsole.log(it.next().value); // 0\nconsole.log(it.next().value); // 1\nconsole.log(it.next().value); // 2"
  },
  {
    "name": "lastIndexOf2",
    "theory": [
      "Phương thức `lastIndexOf()` trả về chỉ mục cuối cùng mà tại đó một phần tử được tìm thấy trong mảng, hoặc -1 nếu không tìm thấy.",
      "Cú pháp: array.lastIndexOf(searchElement, fromIndex = array.length - 1)"
    ],
    "code": "Array.prototype.lastIndexOf2 = function(searchElement, fromIndex) {\n  const len = this.length;\n  let i = fromIndex !== undefined ? fromIndex : len - 1;\n  if (i < 0) i = len + i;\n  for (; i >= 0; i--) {\n    if (this[i] === searchElement) return i;\n  }\n  return -1;\n}",
    "examples": "console.log([1, 2, 3, 2].lastIndexOf2(2)); // 3\nconsole.log([1, 2, 3].lastIndexOf2(4)); // -1\nconsole.log([1, 2, 3, 2].lastIndexOf2(2, 2)); // 1"
  },
  {
    "name": "map2",
    "theory": [
      "Phương thức `map()` tạo một mảng mới bằng cách áp dụng một hàm callback lên từng phần tử của mảng gốc. Mảng mới có cùng độ dài với mảng ban đầu, nhưng các giá trị có thể khác tuỳ vào kết quả trả về của hàm callback.",
      "Cú pháp: array.map(callback(currentValue, index, array), thisArg)\n- callback: hàm được gọi cho từng phần tử, nhận vào giá trị hiện tại, chỉ mục và mảng gốc.\n- thisArg: giá trị được sử dụng làm `this` khi gọi callback (nếu cần)."
    ],
    "code": "Array.prototype.map2 = function(callback, thisArg) {\n  const result = [];\n  for (let i = 0; i < this.length; i++) {\n    if (i in this) {\n      result[i] = callback.call(thisArg, this[i], i, this);\n    }\n  }\n  return result;\n}",
    "examples": "console.log([1, 2, 3].map2(x => x * 2)); // [2, 4, 6]\nconsole.log([1, 2, 3].map2((x, i) => x + i)); // [1, 3, 5]\nconsole.log([1, 2, 3].map2(function(x) { return x + this.inc; }, { inc: 10 })); // [11, 12, 13]"
  },
  {
    "name": "pop2",
    "theory": [
      "Phương thức `pop()` loại bỏ phần tử cuối cùng của mảng và trả về phần tử đó. Phương thức này làm thay đổi độ dài của mảng gốc và hữu ích khi cần xử lý cấu trúc ngăn xếp (stack - LIFO).",
      "Cú pháp: array.pop()\n- Không nhận tham số.\n- Trả về phần tử cuối hoặc `undefined` nếu mảng rỗng."
    ],
    "code": "Array.prototype.pop2 = function() {\n  if (this.length === 0) return undefined;\n  const last = this[this.length - 1];\n  this.length = this.length - 1;\n  return last;\n}",
    "examples": "const arr1 = [1, 2, 3];\nconsole.log(arr1.pop2()); // 3\nconsole.log(arr1); // [1, 2]"
  },
  {
    "name": "push2",
    "theory": [
      "Phương thức `push()` thêm một hoặc nhiều phần tử vào cuối mảng và trả về độ dài mới của mảng. Đây là phương pháp phổ biến để mở rộng mảng theo hướng thêm vào cuối.",
      "Cú pháp: array.push(element1, ..., elementN)\n- Các phần tử sẽ được thêm vào thứ tự truyền vào.\n- Trả về số phần tử mới trong mảng."
    ],
    "code": "Array.prototype.push2 = function(...items) {\n  for (let i = 0; i < items.length; i++) {\n    this[this.length] = items[i];\n  }\n  return this.length;\n}",
    "examples": "const arr2 = [1, 2];\nconsole.log(arr2.push2(3)); // 3\nconsole.log(arr2.push2(4, 5)); // 5\nconsole.log(arr2); // [1, 2, 3, 4, 5]"
  },
  {
    "name": "reduce2",
    "theory": [
      "Phương thức `reduce()` thực hiện một phép tính tích lũy trên từng phần tử của mảng (từ trái sang phải) để giảm mảng về một giá trị duy nhất. Rất hữu ích để tính tổng, nhân, tìm giá trị lớn nhất, v.v.",
      "Cú pháp: array.reduce(callback(accumulator, currentValue, index, array), initialValue)\n- callback: hàm xử lý từng phần tử, nhận giá trị tích lũy hiện tại và giá trị hiện tại của mảng.\n- initialValue: giá trị khởi đầu cho biến tích lũy. Nếu không truyền, phần tử đầu tiên sẽ được dùng làm giá trị khởi đầu và bắt đầu từ phần tử thứ hai."
    ],
    "code": "Array.prototype.reduce2 = function(callback, initialValue) {\n  let acc = initialValue;\n  let i = 0;\n  if (acc === undefined) {\n    acc = this[0];\n    i = 1;\n  }\n  for (; i < this.length; i++) {\n    if (i in this) acc = callback(acc, this[i], i, this);\n  }\n  return acc;\n}",
    "examples": "console.log([1, 2, 3, 4].reduce2((acc, cur) => acc + cur)); // 10\nconsole.log([1, 2, 3, 4].reduce2((acc, cur) => acc + cur, 5)); // 15"
  },
  {
    "name": "reduceRight2",
    "theory": [
      "Phương thức `reduceRight()` giống như `reduce()`, nhưng duyệt mảng từ phải sang trái. Phù hợp cho các bài toán yêu cầu tính tích lũy ngược, ví dụ: xây dựng biểu thức toán học từ phải sang trái.",
      "Cú pháp: array.reduceRight(callback(accumulator, currentValue, index, array), initialValue)\n- callback: hàm được gọi cho từng phần tử, tương tự như `reduce()`.\n- initialValue: giá trị khởi đầu cho tích lũy."
    ],
    "code": "Array.prototype.reduceRight2 = function(callback, initialValue) {\n  let acc = initialValue;\n  let i = this.length - 1;\n  if (acc === undefined) {\n    acc = this[i];\n    i--;\n  }\n  for (; i >= 0; i--) {\n    if (i in this) acc = callback(acc, this[i], i, this);\n  }\n  return acc;\n}",
    "examples": "console.log([1, 2, 3, 4].reduceRight2((acc, cur) => acc - cur)); // -2 (4 - 3 - 2 - 1)\nconsole.log([1, 2, 3, 4].reduceRight2((acc, cur) => acc + cur, 0)); // 10"
  },
  {
    "name": "reverse2",
    "theory": [
      "Phương thức `reverse()` đảo ngược thứ tự các phần tử của mảng. Phần tử đầu tiên trở thành phần tử cuối cùng và ngược lại. Phương thức này **thay đổi mảng gốc**.",
      "Cú pháp: array.reverse()\n- Không có tham số.\n- Trả về chính mảng sau khi đã bị đảo ngược."
    ],
    "code": "Array.prototype.reverse2 = function() {\n  let left = 0;\n  let right = this.length - 1;\n  while (left < right) {\n    [this[left], this[right]] = [this[right], this[left]];\n    left++;\n    right--;\n  }\n  return this;\n}",
    "examples": "console.log([1, 2, 3].reverse2()); // [3, 2, 1]\nconsole.log([].reverse2()); // []"
  },
  {
    "name": "shift2",
    "theory": [
      "Phương thức `shift()` xóa phần tử đầu tiên trong mảng và trả về phần tử đó. Các phần tử còn lại sẽ được dịch sang trái một vị trí. Mảng bị thay đổi.",
      "Cú pháp: array.shift()\n- Không có tham số.\n- Trả về phần tử đầu tiên trong mảng, hoặc `undefined` nếu mảng rỗng."
    ],
    "code": "Array.prototype.shift2 = function() {\n  if (this.length === 0) return undefined;\n  const first = this[0];\n  for (let i = 1; i < this.length; i++) {\n    this[i - 1] = this[i];\n  }\n  this.length--;\n  return first;\n}",
    "examples": "const arr = [10, 20, 30];\nconsole.log(arr.shift2()); // 10\nconsole.log(arr); // [20, 30]"
  },
  {
    "name": "slice2",
    "theory": [
      "Phương thức `slice()` trả về một bản sao nông của một phần mảng từ `start` đến trước `end`. Mảng gốc **không bị thay đổi**.",
      "Cú pháp: array.slice(start, end)\n- start: chỉ mục bắt đầu (mặc định là 0).\n- end: chỉ mục kết thúc (không bao gồm, mặc định là array.length)."
    ],
    "code": "Array.prototype.slice2 = function(start = 0, end = this.length) {\n  const result = [];\n  const len = this.length;\n  start = start < 0 ? Math.max(len + start, 0) : Math.min(start, len);\n  end = end < 0 ? Math.max(len + end, 0) : Math.min(end, len);\n  for (let i = start; i < end; i++) {\n    if (i in this) result.push(this[i]);\n  }\n  return result;\n}",
    "examples": "console.log([1, 2, 3, 4, 5].slice2(1, 4)); // [2, 3, 4]\nconsole.log([1, 2, 3, 4, 5].slice2(-4, -1)); // [2, 3, 4]"
  },
  {
    "name": "some2",
    "theory": [
      "Phương thức `some()` kiểm tra xem **ít nhất một phần tử** trong mảng có thỏa mãn điều kiện trong callback hay không. Trả về `true` nếu có phần tử thỏa mãn, ngược lại là `false`.",
      "Cú pháp: array.some(callback(element, index, array), thisArg)\n- callback: hàm kiểm tra điều kiện cho từng phần tử.\n- thisArg: giá trị `this` sử dụng trong callback (tùy chọn)."
    ],
    "code": "Array.prototype.some2 = function(callback, thisArg) {\n  for (let i = 0; i < this.length; i++) {\n    if (i in this && callback.call(thisArg, this[i], i, this)) {\n      return true;\n    }\n  }\n  return false;\n}",
    "examples": "console.log([1, 2, 3, 4].some2(x => x > 3)); // true\nconsole.log([1, 2, 3, 4].some2(x => x > 5)); // false"
  },
  {
    "name": "sort2",
    "theory": [
      "Phương thức `sort()` sắp xếp các phần tử của mảng theo thứ tự tăng dần theo mặc định hoặc dựa theo hàm so sánh được cung cấp. Phương thức **thay đổi mảng gốc**.",
      "Cú pháp: array.sort(compareFunction)\n- compareFunction(a, b): hàm xác định thứ tự sắp xếp.\n  + Nếu trả về < 0 → a đứng trước b\n  + Nếu trả về > 0 → b đứng trước a\n  + Nếu = 0 → không thay đổi thứ tự"
    ],
    "code": "Array.prototype.sort2 = function(compareFn) {\n  const arr = [...this];\n  compareFn = compareFn || ((a, b) => String(a).localeCompare(String(b)));\n  for (let i = 0; i < arr.length - 1; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (compareFn(arr[i], arr[j]) > 0) {\n        [arr[i], arr[j]] = [arr[j], arr[i]];\n      }\n    }\n  }\n  return arr;\n}",
    "examples": "console.log([3, 1, 4, 2].sort2()); // [1, 2, 3, 4]\nconsole.log(['banana', 'apple', 'cherry'].sort2()); // ['apple', 'banana', 'cherry']\nconsole.log([10, 2, 5].sort2((a, b) => a - b)); // [2, 5, 10]"
  },
  {
    "name": "splice2",
    "theory": [
      "Phương thức `splice()` thay đổi nội dung mảng bằng cách xóa, thay thế hoặc thêm phần tử mới vào vị trí xác định. Phương thức này làm thay đổi mảng gốc.",
      "Cú pháp: array.splice(start, deleteCount, item1, item2, ...)\n- start: vị trí bắt đầu thay đổi.\n- deleteCount: số phần tử cần xóa.\n- item1, item2,...: các phần tử được thêm vào."
    ],
    "code": "Array.prototype.splice2 = function(start, deleteCount, ...items) {\n  const removed = [];\n  const len = this.length;\n  start = start < 0 ? Math.max(len + start, 0) : Math.min(start, len);\n  deleteCount = Math.min(deleteCount, len - start);\n  for (let i = start; i < start + deleteCount; i++) {\n    removed.push(this[i]);\n  }\n  const tail = this.slice(start + deleteCount);\n  this.length = start;\n  for (let item of items) {\n    this.push(item);\n  }\n  for (let item of tail) {\n    this.push(item);\n  }\n  return removed;\n}",
    "examples": "let arr = [1, 2, 3, 4, 5];\nconsole.log(arr.splice2(2, 2, 8, 9)); // [3, 4]\nconsole.log(arr); // [1, 2, 8, 9, 5]"
  },
  {
    "name": "toLocaleString2",
    "theory": [
      "Phương thức `toLocaleString()` chuyển đổi các phần tử trong mảng thành chuỗi, sử dụng định dạng ngôn ngữ địa phương. Mỗi phần tử được định dạng bằng phương thức `toLocaleString()` của chính nó.",
      "Cú pháp: array.toLocaleString(locales, options)\n- locales: định danh ngôn ngữ (tùy chọn).\n- options: đối tượng cấu hình định dạng (tùy chọn)."
    ],
    "code": "Array.prototype.toLocaleString2 = function(locales, options) {\n  return this.map(item => {\n    return item != null && typeof item.toLocaleString === 'function'\n      ? item.toLocaleString(locales, options)\n      : String(item);\n  }).join(',');\n}",
    "examples": "const date = new Date('2024-01-01');\nconsole.log([123456.789, date].toLocaleString2('de-DE'));\n// \"123.456,789,1.1.2024\""
  },
  {
    "name": "toString2",
    "theory": [
      "Phương thức `toString()` chuyển đổi toàn bộ mảng thành một chuỗi, trong đó các phần tử được nối với nhau bằng dấu phẩy. Tương đương với `join(',')`.",
      "Cú pháp: array.toString()\n- Không có tham số."
    ],
    "code": "Array.prototype.toString2 = function() {\n  return this.join(',');\n}",
    "examples": "console.log([1, 2, 3].toString2()); // \"1,2,3\"\nconsole.log([\"a\", \"b\", \"c\"].toString2()); // \"a,b,c\""
  },
  {
    "name": "unshift2",
    "theory": [
      "Phương thức `unshift()` thêm một hoặc nhiều phần tử vào **đầu mảng**, và trả về độ dài mới của mảng. Mảng gốc bị thay đổi.",
      "Cú pháp: array.unshift(element1, ..., elementN)\n- element1...N: các phần tử cần thêm vào đầu mảng."
    ],
    "code": "Array.prototype.unshift2 = function(...items) {\n  this.length = this.length + items.length;\n  for (let i = this.length - 1; i >= items.length; i--) {\n    this[i] = this[i - items.length];\n  }\n  for (let i = 0; i < items.length; i++) {\n    this[i] = items[i];\n  }\n  return this.length;\n}",
    "examples": "const arr = [3, 4];\nconsole.log(arr.unshift2(1, 2)); // 4\nconsole.log(arr); // [1, 2, 3, 4]"
  },
  {
    "name": "values2",
    "theory": [
      "Phương thức `values()` trả về một đối tượng iterator chứa các giá trị của mảng, cho phép duyệt từng phần tử bằng `for...of`. Không thay đổi mảng gốc.",
      "Cú pháp: array.values()\n- Không có tham số.\n- Trả về đối tượng iterator."
    ],
    "code": "Array.prototype.values2 = function* () {\n  for (let i = 0; i < this.length; i++) {\n    yield this[i];\n  }\n}",
    "examples": "const iterator = [10, 20, 30].values2();\nconsole.log(iterator.next().value); // 10\nconsole.log(iterator.next().value); // 20"
  },
  {
    "name": "with2",
    "theory": [
      "Phương thức `with()` trả về một bản sao của mảng với phần tử tại chỉ mục được thay bằng giá trị mới. Không thay đổi mảng gốc.",
      "Cú pháp: array.with(index, value)\n- index: chỉ mục phần tử cần thay.\n- value: giá trị mới để gán."
    ],
    "code": "Array.prototype.with2 = function(index, value) {\n  const arr = [...this];\n  const i = index < 0 ? arr.length + index : index;\n  if (i < 0 || i >= arr.length) throw new RangeError('Index out of range');\n  arr[i] = value;\n  return arr;\n}",
    "examples": "console.log([1, 2, 3].with2(1, 99)); // [1, 99, 3]\nconsole.log([1, 2, 3].with2(-1, 0)); // [1, 2, 0]"
  },
  {
    "name": "findLast2",
    "theory": [
      "Phương thức `findLast()` trả về **phần tử cuối cùng** trong mảng thỏa mãn điều kiện của hàm kiểm tra. Không thay đổi mảng gốc.",
      "Cú pháp: array.findLast(callback, thisArg)\n- callback: hàm kiểm tra.\n- thisArg: giá trị `this` cho callback (tùy chọn)."
    ],
    "code": "Array.prototype.findLast2 = function(callback, thisArg) {\n  for (let i = this.length - 1; i >= 0; i--) {\n    if (callback.call(thisArg, this[i], i, this)) {\n      return this[i];\n    }\n  }\n  return undefined;\n}",
    "examples": "console.log([1, 2, 3, 4].findLast2(x => x % 2 === 0)); // 4\nconsole.log([1, 3, 5].findLast2(x => x > 5)); // undefined"
  },
  {
    "name": "findLastIndex2",
    "theory": [
      "Phương thức `findLastIndex()` trả về **chỉ mục** của phần tử cuối cùng trong mảng thỏa mãn điều kiện. Nếu không có phần tử nào, trả về -1.",
      "Cú pháp: array.findLastIndex(callback, thisArg)\n- callback: hàm kiểm tra.\n- thisArg: giá trị `this` cho callback (tùy chọn)."
    ],
    "code": "Array.prototype.findLastIndex2 = function(callback, thisArg) {\n  for (let i = this.length - 1; i >= 0; i--) {\n    if (callback.call(thisArg, this[i], i, this)) {\n      return i;\n    }\n  }\n  return -1;\n}",
    "examples": "console.log([1, 2, 3, 4].findLastIndex2(x => x % 2 === 0)); // 3\nconsole.log([1, 3, 5].findLastIndex2(x => x > 5)); // -1"
  },
  {
    "name": "toReversed2",
    "theory": [
      "Phương thức `toReversed()` trả về một bản sao đảo ngược của mảng, không làm thay đổi mảng gốc.",
      "Cú pháp: array.toReversed()\n- Không có tham số."
    ],
    "code": "Array.prototype.toReversed2 = function() {\n  const arr = [];\n  for (let i = this.length - 1; i >= 0; i--) {\n    arr.push(this[i]);\n  }\n  return arr;\n}",
    "examples": "console.log([1, 2, 3].toReversed2()); // [3, 2, 1]"
  },
  {
    "name": "toSorted2",
    "theory": [
      "Phương thức `toSorted()` trả về một bản sao của mảng đã được sắp xếp mà không làm thay đổi mảng gốc. Hoạt động giống `sort()` nhưng không làm thay đổi mảng ban đầu.",
      "Cú pháp: array.toSorted(compareFn)\n- compareFn: hàm so sánh tùy chọn."
    ],
    "code": "Array.prototype.toSorted2 = function(compareFn) {\n  const arr = [...this];\n  return arr.sort(compareFn);\n}",
    "examples": "console.log([3, 1, 2].toSorted2()); // [1, 2, 3]\nconsole.log([\"b\", \"a\", \"c\"].toSorted2()); // [\"a\", \"b\", \"c\"]"
  }
]
